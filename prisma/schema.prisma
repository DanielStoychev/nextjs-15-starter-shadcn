// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique // Email should be required for credential login
  hashedPassword  String?   // New field for storing hashed passwords
  emailVerified   DateTime?
  image           String?
  stripeCustomerId String? @unique // New field for Stripe Customer ID
  username        String?   @unique
  bio             String?   @db.Text
  location        String?
  favouriteTeam   String?
  role            Role      @default(USER) // Add role field
  accounts        Account[]
  sessions        Session[]
  orders          Order[]   // Link to orders
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Stripe Integration Models
model Order {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  amount        Int       // Amount in cents
  currency      String
  status        String    // e.g., "pending", "completed", "failed"
  stripePaymentIntentId String? @unique // ID from Stripe for the payment intent
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Enums
enum Role { 
  USER 
  ADMIN 
}
