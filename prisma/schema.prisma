generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String          @id @default(cuid())
  name                     String?
  email                    String          @unique
  emailVerified            DateTime?
  image                    String?
  stripeCustomerId         String?         @unique
  bio                      String?
  favouriteTeam            String?
  location                 String?
  username                 String?         @unique
  hashedPassword           String?
  role                     Role            @default(USER)
  emailVerificationExpires DateTime?
  emailVerificationToken   String?         @unique
  passwordResetExpires     DateTime?
  passwordResetToken       String?         @unique
  accounts                 Account[]
  orders                   Order[]
  sessions                 Session[]
  userGameEntries          UserGameEntry[]
  adminAuditLogs           AdminAuditLog[]
  notifications            Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id                    String   @id @default(cuid())
  userId                String
  amount                Int
  currency              String
  status                String
  stripePaymentIntentId String?  @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])
}

model Game {
  id            String         @id @default(cuid())
  name          String         @unique
  slug          String         @unique
  description   String?
  gameInstances GameInstance[]
}

model GameInstance {
  id                 String          @id @default(cuid())
  gameId             String
  name               String
  startDate          DateTime
  endDate            DateTime
  status             GameStatus      @default(PENDING)
  prizePool          Int             @default(0)
  entryFee           Int             @default(0)
  instanceRoundCUIDs String[]
  numberOfRounds     Int?
  game               Game            @relation(fields: [gameId], references: [id])
  userEntries        UserGameEntry[]
}

model UserGameEntry {
  id                       String                    @id @default(cuid())
  userId                   String
  gameInstanceId           String
  status                   UserGameEntryStatus       @default(PENDING_PAYMENT)
  currentScore             Int                       @default(0)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  lastManStandingPicks     LastManStandingPick[]
  raceTo33Assignment       RaceTo33Assignment?
  tablePredictorPrediction TablePredictorPrediction?
  gameInstance             GameInstance              @relation(fields: [gameInstanceId], references: [id])
  user                     User                      @relation(fields: [userId], references: [id])
  weeklyScorePredictions   WeeklyScorePrediction[]

  @@unique([userId, gameInstanceId])
}

model LastManStandingPick {
  id              String        @id @default(cuid())
  userGameEntryId String
  roundId         String
  pickedTeamId    String
  isCorrect       Boolean?
  isEliminated    Boolean       @default(false)
  createdAt       DateTime      @default(now())
  round           Round         @relation(fields: [roundId], references: [id])
  userGameEntry   UserGameEntry @relation(fields: [userGameEntryId], references: [id])

  @@unique([userGameEntryId, roundId])
}

model TablePredictorPrediction {
  id                  String        @id @default(cuid())
  userGameEntryId     String        @unique
  predictedOrder      String[]
  predictedTotalGoals Int
  score               Int?
  createdAt           DateTime      @default(now())
  userGameEntry       UserGameEntry @relation(fields: [userGameEntryId], references: [id])
}

model WeeklyScorePrediction {
  id                 String        @id @default(cuid())
  userGameEntryId    String
  fixtureId          String
  predictedHomeScore Int
  predictedAwayScore Int
  pointsAwarded      Int?
  createdAt          DateTime      @default(now())
  fixture            Fixture       @relation(fields: [fixtureId], references: [id])
  userGameEntry      UserGameEntry @relation(fields: [userGameEntryId], references: [id])

  @@unique([userGameEntryId, fixtureId])
}

model RaceTo33Assignment {
  id              String        @id @default(cuid())
  userGameEntryId String        @unique
  cumulativeGoals Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  assignedTeamIds String[]
  userGameEntry   UserGameEntry @relation(fields: [userGameEntryId], references: [id])
}

model League {
  id           String    @id @default(cuid())
  sportMonksId Int       @unique
  name         String
  countryId    Int
  fixtures     Fixture[]
  rounds       Round[]
  seasons      Season[]
  teams        Team[]
}

model Season {
  id           String    @id @default(cuid())
  sportMonksId Int       @unique
  leagueId     String
  name         String
  isCurrent    Boolean
  fixtures     Fixture[]
  rounds       Round[]
  league       League    @relation(fields: [leagueId], references: [id])
  teams        Team[]
}

model Round {
  id                   String                @id @default(cuid())
  sportMonksId         Int                   @unique
  seasonId             String
  leagueId             String
  name                 String
  startDate            DateTime
  endDate              DateTime
  fixtures             Fixture[]
  lastManStandingPicks LastManStandingPick[]
  league               League                @relation(fields: [leagueId], references: [id])
  season               Season                @relation(fields: [seasonId], references: [id])
}

model Team {
  id           String    @id @default(cuid())
  sportMonksId Int       @unique
  name         String
  logoPath     String?
  leagueId     String
  seasonId     String
  awayFixtures Fixture[] @relation("AwayTeamFixtures")
  homeFixtures Fixture[] @relation("HomeTeamFixtures")
  league       League    @relation(fields: [leagueId], references: [id])
  season       Season    @relation(fields: [seasonId], references: [id])
}

model Fixture {
  id                     String                  @id @default(cuid())
  sportMonksId           Int                     @unique
  roundId                String
  leagueId               String
  seasonId               String
  homeTeamId             String
  awayTeamId             String
  homeScore              Int?
  awayScore              Int?
  status                 String
  matchDate              DateTime
  awayTeam               Team                    @relation("AwayTeamFixtures", fields: [awayTeamId], references: [id])
  homeTeam               Team                    @relation("HomeTeamFixtures", fields: [homeTeamId], references: [id])
  league                 League                  @relation(fields: [leagueId], references: [id])
  round                  Round                   @relation(fields: [roundId], references: [id])
  season                 Season                  @relation(fields: [seasonId], references: [id])
  weeklyScorePredictions WeeklyScorePrediction[]
}

model AdminAuditLog {
  id          String   @id @default(cuid())
  adminId     String
  action      String
  entityType  String
  entityId    String
  details     Json?
  ipAddress   String?
  createdAt   DateTime @default(now())
  admin       User     @relation(fields: [adminId], references: [id])
}

model Notification {
  id          String                @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  read        Boolean               @default(false)
  priority    NotificationPriority  @default(MEDIUM)
  actionUrl   String?
  actionText  String?
  metadata    Json?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  GAME
  PAYMENT
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}

enum Role {
  USER
  ADMIN
}

enum GameStatus {
  PENDING
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum UserGameEntryStatus {
  ACTIVE
  ELIMINATED
  COMPLETED
  BUST
  PENDING_PAYMENT
}
